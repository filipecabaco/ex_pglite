         SET statement_timeout = 0;
 SET lock_timeout = 0;
 SET idle_in_transaction_session_timeout = 0;
 SET transaction_timeout = 0;
 SET client_encoding = 'UTF8';
 SET standard_conforming_strings = on;
 SELECT pg_catalog.set_config('search_path', '', false);
 SET check_function_bodies = false;
 SET xmloption = content;
 SET client_min_messages = warning;
 SET row_security = off;
      CREATE SCHEMA IF NOT EXISTS public;
     SET default_tablespace = '';
  SET default_table_access_method = heap;
      CREATE TABLE IF NOT EXISTS public.comments (     id integer NOT NULL,     post_id integer,     user_id integer,     content text NOT NULL,     created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP );
   ALTER TABLE public.comments OWNER TO postgres;
      CREATE SEQUENCE IF NOT EXISTS public.comments_id_seq     AS integer     START WITH 1     INCREMENT BY 1     NO MINVALUE     NO MAXVALUE     CACHE 1;
   ALTER SEQUENCE public.comments_id_seq OWNER TO postgres;
      ALTER SEQUENCE public.comments_id_seq OWNED BY public.comments.id;
       CREATE TABLE IF NOT EXISTS public.posts (     id integer NOT NULL,     user_id integer,     title character varying(200) NOT NULL,     content text,     published boolean DEFAULT false,     created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,     updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP );
   ALTER TABLE public.posts OWNER TO postgres;
      CREATE SEQUENCE IF NOT EXISTS public.posts_id_seq     AS integer     START WITH 1     INCREMENT BY 1     NO MINVALUE     NO MAXVALUE     CACHE 1;
   ALTER SEQUENCE public.posts_id_seq OWNER TO postgres;
      ALTER SEQUENCE public.posts_id_seq OWNED BY public.posts.id;
       CREATE TABLE IF NOT EXISTS public.users (     id integer NOT NULL,     name character varying(100) NOT NULL,     email character varying(100) NOT NULL,     age integer,     created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,     updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP );
   ALTER TABLE public.users OWNER TO postgres;
      CREATE SEQUENCE IF NOT EXISTS public.users_id_seq     AS integer     START WITH 1     INCREMENT BY 1     NO MINVALUE     NO MAXVALUE     CACHE 1;
   ALTER SEQUENCE public.users_id_seq OWNER TO postgres;
      ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;
       ALTER TABLE ONLY public.comments ALTER COLUMN id SET DEFAULT nextval('public.comments_id_seq'::regclass);
       ALTER TABLE ONLY public.posts ALTER COLUMN id SET DEFAULT nextval('public.posts_id_seq'::regclass);
       ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);
             INSERT INTO public.posts (id, user_id, title, content, published, created_at, updated_at) VALUES (1, 1, 'Welcome to My Blog', 'This is my first blog post. Welcome everyone!', true, '2025-09-01 22:07:40.289498', '2025-09-01 22:07:40.289498');
 INSERT INTO public.posts (id, user_id, title, content, published, created_at, updated_at) VALUES (2, 2, 'Learning Elixir', 'Elixir is an amazing language for building concurrent applications.', true, '2025-09-01 22:07:40.289498', '2025-09-01 22:07:40.289498');
 INSERT INTO public.posts (id, user_id, title, content, published, created_at, updated_at) VALUES (3, 3, 'Database Replication', 'Real-time data sync is crucial for modern applications.', true, '2025-09-01 22:07:40.289498', '2025-09-01 22:07:40.289498');
 INSERT INTO public.posts (id, user_id, title, content, published, created_at, updated_at) VALUES (4, 1, 'Draft Post', 'This post is still being written...', false, '2025-09-01 22:07:40.289498', '2025-09-01 22:07:40.289498');
 INSERT INTO public.posts (id, user_id, title, content, published, created_at, updated_at) VALUES (5, 4, 'Docker Tips', 'Some useful Docker tips and tricks for developers.', true, '2025-09-01 22:07:40.289498', '2025-09-01 22:07:40.289498');
       INSERT INTO public.users (id, name, email, age, created_at, updated_at) VALUES (1, 'Alice Johnson', 'alice@example.com', 28, '2025-09-01 22:07:40.288733', '2025-09-01 22:07:40.288733');
 INSERT INTO public.users (id, name, email, age, created_at, updated_at) VALUES (2, 'Bob Smith', 'bob@example.com', 32, '2025-09-01 22:07:40.288733', '2025-09-01 22:07:40.288733');
 INSERT INTO public.users (id, name, email, age, created_at, updated_at) VALUES (3, 'Carol Davis', 'carol@example.com', 25, '2025-09-01 22:07:40.288733', '2025-09-01 22:07:40.288733');
 INSERT INTO public.users (id, name, email, age, created_at, updated_at) VALUES (4, 'David Wilson', 'david@example.com', 35, '2025-09-01 22:07:40.288733', '2025-09-01 22:07:40.288733');
 INSERT INTO public.users (id, name, email, age, created_at, updated_at) VALUES (5, 'Eve Brown', 'eve@example.com', 29, '2025-09-01 22:07:40.288733', '2025-09-01 22:07:40.288733');
       SELECT pg_catalog.setval('public.comments_id_seq', 1, false);
       SELECT pg_catalog.setval('public.posts_id_seq', 5, true);
       SELECT pg_catalog.setval('public.users_id_seq', 5, true);
       ALTER TABLE ONLY public.comments     ADD CONSTRAINT comments_pkey PRIMARY KEY (id);
       ALTER TABLE ONLY public.posts     ADD CONSTRAINT posts_pkey PRIMARY KEY (id);
       ALTER TABLE ONLY public.users     ADD CONSTRAINT users_email_key UNIQUE (email);
       ALTER TABLE ONLY public.users     ADD CONSTRAINT users_pkey PRIMARY KEY (id);
       ALTER TABLE ONLY public.comments     ADD CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id) ON DELETE CASCADE;
       ALTER TABLE ONLY public.comments     ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;
       ALTER TABLE ONLY public.posts     ADD CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.users(id) ON DELETE CASCADE;
         